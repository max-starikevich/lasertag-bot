import dedent from 'dedent-js'

import { Command, CommandHandler } from '../types'

import { MIN_PLAYERS_FOR_BALANCE_ADJUST } from '$/game/player/balance'

const handler: CommandHandler = async (ctx) => {
  const { game, logger } = ctx

  await game.refreshData({ logger })

  const [redPlayers, bluePlayers] = await game.getTeams()

  if (redPlayers.length < MIN_PLAYERS_FOR_BALANCE_ADJUST || bluePlayers.length < MIN_PLAYERS_FOR_BALANCE_ADJUST) {
    return await ctx.replyWithHTML(`ü§∑ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º ${MIN_PLAYERS_FOR_BALANCE_ADJUST}x${MIN_PLAYERS_FOR_BALANCE_ADJUST}`)
  }

  const placeAndTime = await game.getPlaceAndTime()

  const teams = dedent`
    üìÖ <b>${placeAndTime}</b>

    üî¥ ${redPlayers.length} vs. ${bluePlayers.length} üîµ

    ${redPlayers
      .map((player) => `üî¥ ${player.name}`)
      .join('\n')}

    ${bluePlayers
      .map((player) => `üîµ ${player.name}`)
      .join('\n')}

    –ë–∞–ª–∞–Ω—Å: üî¥ ${redPlayers.reduce((result, { level }) => result + level, 0)} üîµ ${bluePlayers.reduce((sum, player) => sum + player.level, 0)}
  `

  return await ctx.replyWithHTML(teams)
}

export const teams: Command = {
  name: 'teams',
  handler,
  description: '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –±–∞–∑–µ —Ñ–∞–π–ª–∞ –∑–∞–ø–∏—Å–∏',
  showInMenu: true
}
